#!/bin/csh -f
#================================================
# configuration, March 2003   Yuqiong Liu
#================================================

set TOP_DIR = `pwd`
set CONFIG_IN = ${TOP_DIR}/obj/config.in
set CONFIG_BAK = ${TOP_DIR}/obj/config.bak

#============================================
#  save old configuration file to config.bak 
#============================================
echo
if ( -f $CONFIG_IN ) then
    echo "Save old config.in to config.bak"
    mv -f $CONFIG_IN $CONFIG_BAK
endif


#============================================
#  Ask user for model & algorithm parameters
#============================================
echo
echo "Input proper parameters from the keyboard upon request."
echo "-----------------------------------------------"

set flag = 1
while ( $flag )
    echo -n "Is your model written in C or Fortran? [C]:" 
    set ans = $<
    switch ($ans)
        case "":
        case C:
        case c:
            set MOD_VER = C
            set flag = 0
	    breaksw
        case FORTRAN:
        case fortran:
        case Fortran:
            set flag = 0
            set MOD_VER = FORTRAN
            breaksw
        case *:
            echo "invalid choice: $ans"
            echo
    endsw
end

echo
set flag = 1
while ( $flag )
    echo -n "Model directory name? [SAC_SMA]:"
    set ans = $<
    switch ($ans)
        case "":
            set MOD_DIR = SAC_SMA
            set flag = 0
            breaksw
        case *:
            if ( -d $ans ) then
                set flag = 0 
                set MOD_DIR = $ans
                breaksw
            else
                echo "Invalid directory : $ans"
                echo
            endif
     endsw
end

echo
set flag = 1
while ( $flag )
    echo -n "Choose an algorithm MULTI or SINGL? [MULTI]:"
    set ans = $<
    switch ($ans)
        case "":
        case MULTI:
        case multi:
        case Multi:
        case M:
        case m:
             set MOD_ALGO = MULTI
             set flag = 0
             breaksw
        case SINGL:
        case singl:
        case Singl:
        case S:
        case s:
             set MOD_ALGO = SINGL
             set flag = 0
             breaksw
        case *:
             echo "Invalid option: $ans"
             echo
    endsw
end

echo
set flag = 1
while ( $flag )
    echo -n "Input a negative number for random seed [-103]:"
    set ans = $<
    switch ($ans)
        case "":
            set IDUM = -103
            set flag = 0
            breaksw
        case *: 
            if ( $ans < 0 ) then
                set IDUM = $ans
                set flag = 0
                breaksw 
            else
                echo "$ans is not a valid random seed. Must be a negative integer number\!"
                echo
            endif
    endsw
end
  

echo
set flag = 1
while ($flag)
    echo -n "Total number of parameters (including those not used for optimization) [13]:"
    set ans = $<
    switch ($ans)
        case "":
             set NPAR = 13
             set flag = 0
             breaksw
        case *:
            if ( $ans<= 0) then
                echo "$ans is not a valid number. Must be a positive integer number\!"
                echo
            else
                set NPAR = $ans 
                set flag = 0
                breaksw
            endif
    endsw
end

echo
set flag = 1
while ($flag)
    echo -n "Total number of INPUT (forcing) variables [5]:"
    set ans = $<
    switch ($ans)
        case "":
            set NINPUT = 5
            set flag = 0
            breaksw
        case *:
            if ( $ans<= 0) then
                echo "$ans is not a valid number. Must be a positive integer number\!"
                echo
            else
                set NINPUT = $ans
                set flag = 0
                breaksw
            endif
    endsw
end

echo
set flag = 1
while ($flag)
    echo -n "Total number of OUTPUT variables (fluxes)[2]: "                             
    set ans = $<
    switch ($ans)
        case "":
            set NFLUX = 2
            set flag = 0
            breaksw
        case *:
            if ( $ans<= 0) then
                echo "$ans is not a valid number. Must be a positive integer number\!"
                echo
            else
                set NFLUX = $ans
                set flag = 0
                breaksw
            endif
    endsw
end

echo
set flag = 1
while ($flag)
    echo -n "Total number of time steps of INPUT variables [795]: "                             
    set ans = $<
    switch ($ans)
        case "":
            set NTSTEP1 = 795
            set flag = 0
            breaksw
        case *:
            if ( $ans<= 0) then
                echo "$ans is not a valid number. Must be a positive integer number\!"
                echo
            else
                set NTSTEP1 = $ans
                set flag = 0
                breaksw
            endif
    endsw
end

echo
set flag = 1
while ($flag)
    echo -n "Total number of time steps of OUTPUT variables [731]: "
    set ans = $<
    switch ($ans)
        case "":
            set NTSTEP2 = 731
            set flag = 0
            breaksw
        case *:
            if ( $ans<= 0) then
                echo "$ans is not a valid number. Must be a positive integer number\!"
                echo
            else
                set NTSTEP2 = $ans
                set flag = 0
                breaksw
            endif
    endsw
end

echo
set flag = 1
while ($flag) 
    echo -n "Are there missing data in the observations? [NO]:"
    set ans = $<
    switch ($ans)
        case "":
        case N:
        case n:
        case no:
        case No:
             set HAS_MISSING_VALUE=NO
             set MISSING_VALUE = ""
             set flag = 0
             breaksw
        case YES:
        case Yes:
        case yes:
        case Y:
        case y:
             set HAS_MISSING_VALUE=YES
             echo -n "Input the missing value:"
             set MISSING_VALUE = $<
             set flag = 0
             breaksw
        case *:
             echo "Invalid option: $ans"
             echo
    endsw
end

echo
set flag = 1
set LAMBDA = ""
while ($flag)
    echo -n "Specify objective function [STD]:"
    set ans = $<
    switch ($ans)
        case RMSE:
        case rmse:
        case Rmse:
            set OBJ_FUNC=RMSE
            set flag = 0
            breaksw
        case "":
        case STD:
        case std:
        case Std:
            set OBJ_FUNC=STD
            set flag = 0
            breaksw
        case HMLE:
        case hmle:
        case Hmle:
            set OBJ_FUNC=HMLE
            echo -n "Input a lambda value [0.5]: "
            set LAMBDA = $<
            set flag = 0
            breaksw
        case NSE:
        case nse:
        case Nse:
            set OBJ_FUNC=NSE
            set flag = 0
            breaksw
        case NSC:
        case nsc:
        case Nsc:
            set OBJ_FUNC=NSC
            set flag = 0
            breaksw
        case BIAS:
        case bias:
        case Bias:
            set OBJ_FUNC=BIAS 
            set flag = 0
            breaksw
        case *:
             echo "Invalid objective function: $ans"
             echo
    endsw
end

#=====================================================
#  prepare the configuration file config.in
#=====================================================

cat > $CONFIG_IN << EOF

# MOSCEM configration generated `date` 

#
#    parameter settings
#
MOD_VER           = $MOD_VER
MOD_DIR           = $MOD_DIR
MOD_ALGO          = $MOD_ALGO
IDUM              = $IDUM
NPAR              = $NPAR
NINPUT            = $NINPUT
NFLUX             = $NFLUX
NTSTEP1           = $NTSTEP1
NTSTEP2           = $NTSTEP2
HAS_MISSING_VALUE = $HAS_MISSING_VALUE
MISSING_VALUE     = $MISSING_VALUE
OBJ_FUNC          = $OBJ_FUNC
LAMBDA            = $LAMBDA
EOF

echo
echo "Configration output is in $CONFIG_IN"
echo

exit





